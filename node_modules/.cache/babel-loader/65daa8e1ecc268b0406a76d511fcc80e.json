{"ast":null,"code":"var _jsxFileName = \"/Users/fireowl/Desktop/devmountain/specializations-webdev/week-two/react-toy-problems/src/components/Topics/Palindrome.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Palindrome = () => {\n  _s();\n\n  const palindromeCheck = string => {\n    let stringArray = string.toLowerCase().split('');\n    let reversedStringArray = [];\n\n    for (let i = stringArray.length - 1; i >= 0; i--) {\n      reversedStringArray.push(stringArray[i]);\n    }\n\n    console.log(stringArray.join(''), reversedStringArray.join(''));\n    return stringArray.join('') === reversedStringArray.join('');\n  };\n\n  const [status, setStatus] = useState('');\n  const [userInput, setUserInput] = useState('');\n\n  const handleInputChange = typing => {\n    setUserInput(() => typing.target.value);\n  };\n\n  const handleSubmit = submit => {\n    submit.preventDefault();\n    palindromeCheck(userInput) ? setStatus(() => `\"${userInput}\" IS a palindrome!`) : setStatus(() => `\"${userInput}\" is NOT a palindrome!`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"puzzleBox filterStringPB\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Palindrome Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inputLine placeholder\",\n      onChange: handleInputChange,\n      placeholder: \"Check if a word is a palindrome\",\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"confirmationButton\",\n      onClick: handleSubmit,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"resultsBox\",\n      children: [\"Palindrome \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Palindrome, \"kITH9NBHV4Fn4Vd6pOboCkVzpCg=\");\n\n_c = Palindrome;\nexport default Palindrome;\n\nvar _c;\n\n$RefreshReg$(_c, \"Palindrome\");","map":{"version":3,"names":["React","Component","useState","Palindrome","palindromeCheck","string","stringArray","toLowerCase","split","reversedStringArray","i","length","push","console","log","join","status","setStatus","userInput","setUserInput","handleInputChange","typing","target","value","handleSubmit","submit","preventDefault"],"sources":["/Users/fireowl/Desktop/devmountain/specializations-webdev/week-two/react-toy-problems/src/components/Topics/Palindrome.js"],"sourcesContent":["import React, { Component, useState } from 'react'\n\nconst Palindrome = () => {\n\n    const palindromeCheck = (string) => {\n        let stringArray = string.toLowerCase().split('')\n        let reversedStringArray = []\n        for (let i=stringArray.length - 1; i>=0; i--) {\n          reversedStringArray.push(stringArray[i])\n        }\n        console.log(stringArray.join(''), reversedStringArray.join(''))\n        return stringArray.join('') === reversedStringArray.join('')\n      }\n\n    const [status, setStatus] = useState('')\n    const [userInput, setUserInput] = useState('')\n\n    \n    const handleInputChange = (typing) => {\n        setUserInput(() => typing.target.value)\n    }\n\n    const handleSubmit = (submit) => {\n        submit.preventDefault()\n        palindromeCheck(userInput) ? setStatus(() => `\"${userInput}\" IS a palindrome!`) : setStatus(() => `\"${userInput}\" is NOT a palindrome!`)\n    }\n\n    return (\n        <div className=\"puzzleBox filterStringPB\">\n            <h4>Palindrome Checker</h4>\n            <input className=\"inputLine placeholder\" onChange={handleInputChange} placeholder=\"Check if a word is a palindrome\" type=\"text\"></input>\n            <button className=\"confirmationButton\" onClick={handleSubmit}>Check</button>\n            <span className=\"resultsBox\">Palindrome {status}</span>\n        </div>\n    )\n}\n\nexport default Palindrome"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,MAAMC,UAAU,GAAG,MAAM;EAAA;;EAErB,MAAMC,eAAe,GAAIC,MAAD,IAAY;IAChC,IAAIC,WAAW,GAAGD,MAAM,CAACE,WAAP,GAAqBC,KAArB,CAA2B,EAA3B,CAAlB;IACA,IAAIC,mBAAmB,GAAG,EAA1B;;IACA,KAAK,IAAIC,CAAC,GAACJ,WAAW,CAACK,MAAZ,GAAqB,CAAhC,EAAmCD,CAAC,IAAE,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;MAC5CD,mBAAmB,CAACG,IAApB,CAAyBN,WAAW,CAACI,CAAD,CAApC;IACD;;IACDG,OAAO,CAACC,GAAR,CAAYR,WAAW,CAACS,IAAZ,CAAiB,EAAjB,CAAZ,EAAkCN,mBAAmB,CAACM,IAApB,CAAyB,EAAzB,CAAlC;IACA,OAAOT,WAAW,CAACS,IAAZ,CAAiB,EAAjB,MAAyBN,mBAAmB,CAACM,IAApB,CAAyB,EAAzB,CAAhC;EACD,CARH;;EAUA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,EAAD,CAA1C;;EAGA,MAAMkB,iBAAiB,GAAIC,MAAD,IAAY;IAClCF,YAAY,CAAC,MAAME,MAAM,CAACC,MAAP,CAAcC,KAArB,CAAZ;EACH,CAFD;;EAIA,MAAMC,YAAY,GAAIC,MAAD,IAAY;IAC7BA,MAAM,CAACC,cAAP;IACAtB,eAAe,CAACc,SAAD,CAAf,GAA6BD,SAAS,CAAC,MAAO,IAAGC,SAAU,oBAArB,CAAtC,GAAkFD,SAAS,CAAC,MAAO,IAAGC,SAAU,wBAArB,CAA3F;EACH,CAHD;;EAKA,oBACI;IAAK,SAAS,EAAC,0BAAf;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAO,SAAS,EAAC,uBAAjB;MAAyC,QAAQ,EAAEE,iBAAnD;MAAsE,WAAW,EAAC,iCAAlF;MAAoH,IAAI,EAAC;IAAzH;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAQ,SAAS,EAAC,oBAAlB;MAAuC,OAAO,EAAEI,YAAhD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII;MAAM,SAAS,EAAC,YAAhB;MAAA,0BAAyCR,MAAzC;IAAA;MAAA;MAAA;MAAA;IAAA,QAJJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAQH,CAjCD;;GAAMb,U;;KAAAA,U;AAmCN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}